{"version":3,"sources":["webpack/universalModuleDefinition","/Users/chen/Dev/simple-scaffold/cmd.ts","/Users/chen/Dev/simple-scaffold/scaffold.ts","external \"command-line-args\"","external \"command-line-usage\"","external \"fs\"","external \"glob\"","external \"handlebars\"","external \"path\"","webpack/bootstrap","webpack/startup"],"names":["root","factory","exports","module","define","amd","global","filePathParser","content","startsWith","process","cwd","join","path","sep","booleanParser","text","trim","length","includes","defs","name","alias","type","String","description","defaultOption","typeLabel","multiple","JSON","parse","defaultValue","Boolean","args","cliArgs","camelCase","help","header","optionList","createSubFolder","quiet","console","log","cliUsage","exit","info","templates","output","locals","createSubfolder","overwrite","run","config","DefaultConfig","this","DefaultLocals","Name","toUpperCase","slice","toLowerCase","parseLocals","handlebars","compile","noEscape","template","e","warn","fileList","input","checkPath","files","glob","sync","dot","map","g","idx","indexOf","cleanCheckPath","file","push","base","getFileContents","filePath","fs","readFileSync","toString","getOutputPath","basePath","out","basename","outputDir","relativeFilePath","writeFile","fileContents","baseDir","dirname","writeDirectory","encoding","err","shouldWriteFile","existsSync","fileConf","count","outputPath","contents","outputContents","lstatSync","isDirectory","replace","error","Error","parent","mkdirSync","_log","method","fn","SimpleScaffold","require","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","call"],"mappings":"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","file":"cmd.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"library\"] = factory();\n\telse\n\t\troot[\"library\"] = factory();\n})(global, function() {\nreturn ","import SimpleScaffold from \"./scaffold\"\nimport * as fs from \"fs\"\nimport { IScaffold } from \"./index\"\nimport * as cliArgs from \"command-line-args\"\nimport * as cliUsage from \"command-line-usage\"\nimport * as path from \"path\"\n\ntype Def = cliArgs.OptionDefinition & {\n  description?: string\n  typeLabel?: string\n}\n\nfunction localsParser(content: string) {\n  return JSON.parse(content)\n}\n\nfunction filePathParser(content: string) {\n  if (content.startsWith(\"/\")) {\n    return content\n  }\n  return [process.cwd(), content].join(path.sep)\n}\n\nfunction booleanParser(text: string) {\n  return text && text.trim().length\n    ? [\"true\", \"1\", \"on\"].includes(text.trim())\n    : true\n}\n\nconst defs: Def[] = [\n  {\n    name: \"name\",\n    alias: \"n\",\n    type: String,\n    description: \"Component output name\",\n    defaultOption: true,\n  },\n  {\n    name: \"templates\",\n    alias: \"t\",\n    type: filePathParser,\n    typeLabel: \"{underline File}[]\",\n    description: `A glob pattern of template files to load.\\nA template file may be of any type and extension, and supports Handlebars as a parsing engine for the file names and contents, so you may customize both with variables from your configuration.`,\n    multiple: true,\n  },\n  {\n    name: \"output\",\n    alias: \"o\",\n    type: filePathParser,\n    typeLabel: \"{underline File}\",\n    description: `The output directory to put the new files in. They will attempt to maintain their regular structure as they are found, if possible.`,\n  },\n  {\n    name: \"locals\",\n    alias: \"l\",\n    description: `A JSON string for the template to use in parsing.`,\n    typeLabel: \"{underline JSON string}\",\n    type: localsParser,\n  },\n  {\n    name: \"overwrite\",\n    alias: \"w\",\n    description: `Whether to overwrite files when they are found to already exist. {bold Default=true}`,\n    type: booleanParser,\n    typeLabel: \"{underline Boolean}\",\n    defaultValue: true,\n  },\n  {\n    name: \"quiet\",\n    alias: \"q\",\n    description:\n      \"When set to {bold true}, logs will not output (including warnings and errors). {bold Default=false}\",\n    type: booleanParser,\n    typeLabel: \"{underline Boolean}\",\n    defaultValue: false,\n  },\n  {\n    name: \"create-sub-folder\",\n    alias: \"S\",\n    typeLabel: \"{underline Boolean}\",\n    description:\n      \"Whether to create a subdirectory with \\\\{\\\\{Name\\\\}\\\\} in the {underline output} directory. {bold Default=true}\",\n    type: booleanParser,\n    defaultValue: true,\n  },\n  {\n    name: \"help\",\n    alias: \"h\",\n    type: Boolean,\n    description: \"Display this help message\",\n  },\n]\n\nconst args = cliArgs(defs, { camelCase: true }) as Omit<\n  IScaffold.Config,\n  \"createSubFolder\"\n> & {\n  help: boolean\n  createSubFolder: boolean\n}\n\nconst help = [\n  {\n    header: \"Scaffold Generator\",\n    content: `Generate scaffolds for your project based on file templates.\\nUsage: {bold simple-scaffold} {underline scaffold-name} {underline [options]}`,\n  },\n  { header: \"Options\", optionList: defs },\n]\n\nif (args.createSubFolder === null) {\n  args.createSubFolder = true\n}\n\nif (args.quiet === null) {\n  args.quiet = true\n}\n\nif (args.help || !args.name) {\n  console.log(cliUsage(help))\n  process.exit(0)\n}\n\nif (!args.quiet) {\n  console.info(\"Config:\", args)\n}\n\nnew SimpleScaffold({\n  name: args.name,\n  templates: args.templates,\n  output: args.output,\n  locals: args.locals,\n  createSubfolder: args.createSubFolder,\n  overwrite: args.overwrite,\n  quiet: args.quiet,\n}).run()\n","import * as fs from \"fs\"\nimport * as path from \"path\"\nimport { IScaffold } from \"./index.d\"\nimport * as glob from \"glob\"\nimport * as handlebars from \"handlebars\"\n\nclass SimpleScaffold {\n  public config: IScaffold.Config\n  public locals: IScaffold.Config[\"locals\"] = {} as any\n\n  constructor(config: IScaffold.Config) {\n    const DefaultConfig: IScaffold.Config = {\n      name: \"scaffold\",\n      templates: [],\n      output: process.cwd(),\n      createSubfolder: true,\n      overwrite: true,\n      quiet: false,\n    }\n\n    this.config = { ...DefaultConfig, ...config }\n\n    const DefaultLocals = {\n      // TODO improve\n      Name: this.config.name![0].toUpperCase() + this.config.name!.slice(1),\n      name: this.config.name![0].toLowerCase() + this.config.name!.slice(1),\n    }\n\n    this.locals = { ...DefaultLocals, ...config.locals }\n  }\n\n  private parseLocals(text: string): string {\n    try {\n      const template = handlebars.compile(text, {\n        noEscape: true,\n      })\n      return template(this.locals)\n    } catch (e) {\n      this.warn(\"Problem using Handlebars, returning unmodified content\")\n      return text\n    }\n  }\n\n  private fileList(input: string[]): IScaffold.FileRepr[] {\n    const output: IScaffold.FileRepr[] = []\n    for (const checkPath of input) {\n      const files = glob\n        .sync(checkPath, { dot: true })\n        .map((g) => (g[0] == \"/\" ? g : path.join(process.cwd(), g)))\n      const idx = checkPath.indexOf(\"*\")\n      let cleanCheckPath = checkPath\n      if (idx >= 0) {\n        cleanCheckPath = checkPath.slice(0, idx - 1)\n      }\n      for (const file of files) {\n        output.push({ base: cleanCheckPath, file })\n      }\n    }\n    return output\n  }\n\n  private getFileContents(filePath: string): string {\n    this.log(fs.readFileSync(filePath))\n    return fs.readFileSync(filePath).toString()\n  }\n\n  private getOutputPath(file: string, basePath: string): string {\n    let out: string\n\n    if (typeof this.config.output === \"function\") {\n      out = this.config.output(file, basePath, path.basename(file))\n    } else {\n      const outputDir =\n        this.config.output +\n        (this.config.createSubfolder ? `/${this.config.name}/` : \"/\")\n      const idx = file.indexOf(basePath)\n      let relativeFilePath = file\n      if (idx >= 0) {\n        if (file !== basePath) {\n          relativeFilePath = file.slice(idx + basePath.length + 1)\n        } else {\n          relativeFilePath = path.basename(file)\n        }\n      }\n      out = outputDir + relativeFilePath\n    }\n\n    return this.parseLocals(out)\n  }\n\n  private writeFile(filePath: string, fileContents: string): void {\n    const baseDir = path.dirname(filePath)\n    this.writeDirectory(baseDir, filePath)\n    fs.writeFile(filePath, fileContents, { encoding: \"utf-8\" }, (err) => {\n      if (err) {\n        throw err\n      }\n    })\n  }\n\n  private shouldWriteFile(filePath: string) {\n    const overwrite =\n      typeof this.config.overwrite === \"boolean\"\n        ? this.config.overwrite\n        : this.config.overwrite?.(filePath)\n    const exists = fs.existsSync(filePath)\n\n    return !exists || overwrite !== false\n  }\n\n  public run(): void {\n    this.log(`Generating scaffold: ${this.config.name}...`)\n    const templates = this.fileList(this.config.templates)\n\n    let fileConf,\n      count = 0\n\n    this.log(\"Template files:\", templates)\n    for (fileConf of templates) {\n      let outputPath, contents, outputContents, file, base\n      try {\n        count++\n        file = fileConf.file\n        base = fileConf.base\n        outputPath = this.getOutputPath(file, base)\n        if (fs.lstatSync(file).isDirectory()) {\n          this.writeDirectory(outputPath, file)\n          continue\n        }\n        contents = this.getFileContents(file)\n        outputContents = this.parseLocals(contents)\n        if (this.shouldWriteFile(outputPath)) {\n          this.info(\"Writing:\", {\n            file,\n            base,\n            outputPath,\n            outputContents: outputContents.replace(\"\\n\", \"\\\\n\"),\n          })\n          this.writeFile(outputPath, outputContents)\n        } else {\n          this.log(`Skipping file ${outputPath}`)\n        }\n      } catch (e) {\n        this.error(\"Error while processing file:\", {\n          file,\n          base,\n          contents,\n          outputPath,\n          outputContents,\n        })\n        throw e\n      }\n    }\n\n    if (!count) {\n      throw new Error(\"No files to scaffold!\")\n    }\n\n    this.log(\"Done\")\n  }\n\n  private writeDirectory(outputPath: string, file: any): void {\n    const parent = path.dirname(outputPath)\n    if (!fs.existsSync(parent)) {\n      this.writeDirectory(parent, outputPath)\n    }\n    if (!fs.existsSync(outputPath)) {\n      this.info(\"Creating directory:\", {\n        file,\n        outputPath,\n      })\n      fs.mkdirSync(outputPath)\n    }\n  }\n\n  _log(method: keyof typeof console, ...args: any[]): void {\n    if (this.config.quiet) {\n      return\n    }\n    const fn = console[method] as (...a: any[]) => void\n    fn(...args)\n  }\n\n  log(...args: any[]): void {\n    this._log(\"log\", ...args)\n  }\n  info(...args: any[]): void {\n    this._log(\"info\", ...args)\n  }\n  warn(...args: any[]): void {\n    this._log(\"warn\", ...args)\n  }\n  error(...args: any[]): void {\n    this._log(\"error\", ...args)\n  }\n}\n\nexport default SimpleScaffold\n","module.exports = require(\"command-line-args\");;","module.exports = require(\"command-line-usage\");;","module.exports = require(\"fs\");;","module.exports = require(\"glob\");;","module.exports = require(\"handlebars\");;","module.exports = require(\"path\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(784);\n"],"sourceRoot":""}